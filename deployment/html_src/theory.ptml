<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <link href="../style.css" rel="stylesheet" type="text/css"/>
        <title>
            Deployment Theory
        </title>
        
    </head>

    <body>
<!--include menu.txt -->
        <h1>
            Deployment Theory
        </h1>

        <p>
        Deployment pipeline is an integral part of Devops 
        toolchain. It enables best practices like <i> continuous 
        integration and continuous delivery </i>. 
        It means software changes are continuously
        deployed and tested to make it production ready. 
        Automation is the key. Deployment automation can be 
        achieved using Jenkins pipeline and tools like puppet, chef 
        or ansible which can turn infrastructure into code. 
        Puppet, Chef and Ansible were all built the goal to make it 
        much easier to configure and maintain dozens, hundreds, or 
        even thousands of servers. Thus these tools have drastic 
        impact on big organizations. The smaller ones also benefit 
        as automation and orchestration generally make life easier 
        in an infrastructure of any size.
        </p>

        <h4 class="deployment">
            Infrastructure as code
        </h4>

        <blockquote>
        "The enabling idea of Infrastructure as Code is that the 
        systems and devices used to run software can be treated as
        if they, themselves, are software." -- Kief Morris
        </blockquote>

        <p>
        Infrastructure as code means writing code to manage 
        configurations and automate provisioning of infrastructure 
        in addition to deployments. Infrastructure as code makes 
        the infrastructure <i> reliable, repeatable and fast.</i>
        </p>
        <p>
        Infrastructure as Code (IaC) is the management of 
        infrastructure in a descriptive model, using a versioning 
        tool for infrastructure code. IaC model makes the <i>
        environment idempotent </i> by generating the same 
        environment, regardless of the environmentâ€™s starting 
        state, every time infrastructure code is applied.
        </p>
        <p>
        Organizations who use IaC can deliver <i> stable environments 
        rapidly and at scale </i>.
        They can avoid manual configuration of environments and 
        enforce consistency by representing the desired state of 
        their environments via code. Using code to define the 
        server configuration means that there is greater 
        consistency between servers. With manual provisioning 
        different interpretations of imprecise instructions lead 
        to diffirent configurations making it hard to debug in 
        case of faults. 
        </p>
        <p>
        Infrastructure as Code techniques scale effectively to 
        manage large clusters of servers, both in configuring the 
        servers and specifying how they should interact. Thus 
        DevOps teams can work together with a unified set of 
        practices and tools to deliver applications and their 
        supporting infrastructure rapidly, reliably, and at scale.
        </p>
        
        <h4 class="deployment">
            Goals
        </h4>

        <ol class="nested">
            <li>Infrastructure should support and enable changes and 
            not be an obstacle or a constraint.</li>
            <li>IT staff should spend their time on valuable things 
            which engage their abilities rather than on routine, 
            repetitive tasks.</li>
            <li>Users should be able to spin up new enviornments 
            easily without help from IT staff.</li>
            <li>Teams should know how to recover quickly from failure, 
            rather than depending on avoiding failure.
            </li>
            <li>Changes to the system should be routine, automated and
            not involve stress.</li>
        </ol>

        <h4 class="deployment">
            Properties
        </h4>
        
        <ol class="nested">
        <li> <i> Reproducibility </i> -
        The ability to effortlessly build and rebuild any part of the 
        infrastructure enables many powerful capabilities of 
        infrastructure as code.
        </li>
        <li> <i> Consistency </i> -
        The ability to provide same software and configurations to 
        servers built using the infrastucture code. 
        </li>
        <li> <i> Disposability </i> -
        The servers could be destroyed unexpectedly, when hardware 
        fails, or it could be deliberately destroyed in order to 
        reduce capacity or to replace it. 
        </li>
        <li> <i> Service continuity </i> -
        Service must be continuously available to its users even 
        when individual infrastructure elements disappear. We need 
        to make sure our service is always able to handle 
        requests, in spite of what might be happening to the 
        infrastructure. If a server disappears, we need to have 
        backup servers already running and should be able to quickly 
        start up new ones, so that service is not interrupted.
        </li>
        <li> <i> Self-testing systems </i> -
        Effective automated testing is one of the most important 
        practices that should be included with the infrastructure.
        The main benefit from this is fast feedback as to whether the
        changes will work correctly without breaking other parts of the system.
        </li>
        <li> <i> Self-documenting systems </i> -
        A great benefit of the infrastructure as code approach is 
        that the steps to carry out a process are captured in the 
        scripts and tooling that actually carry out that process.
        </li>
        <li> <i> Versioning infrastructure code </i> -
        Just as versioning development code helps to track 
        changes, easy to rollback, visible to team members same 
        benefits apply to infrastructure code as well. Version 
        control systems also support automatically triggering 
        actions when a change is committed thus enabling 
        Continuous Integration and Continuous Delivery pipelines.
        </li>
        </ol>
        <details>
        <summary class="sum2">
                Sources
        </summary>
        <ul class="nested">
             <li><a href="https://www.visualstudio.com/learn/what-is-infrastructure-as-code/">What is Infrastructure as Code?
             </a>
             </li>
             <li><a href="https://www.networkworld.com/article/2172097/virtualization/puppet-vs--chef-vs--ansible-vs--salt.html">
             Deployment tools
             </a>
             </li>
             <li><a href="http://shop.oreilly.com/product/0636920039297.do">
             Infrastructure as Code by Kief Morris
             </a>
             </li>
        </ul>
        </details>
    </body>
</html>
