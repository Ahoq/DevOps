<!DOCTYPE html>
<html>
  <head>
    <!--include subhead.txt -->
    <title>
    dockerSwarm
    </title>
    <!--include googleAnalyticsScript.txt -->
  </head>
  <body>
    <div class="wrapper">
    <!--include navbar.txt -->
    <div id="content">

    <h1>
      Deployment with Clusters
    </h1>
    <p>Deployment of an application in a container over a number 
      of machines with replicas to scale the applications as well 
      as recover from failures is the principle concept of cluster 
      deployment.Such kind of deployment provision requires an
      automation infrastrucure to create, manage, maintain the clusters.
      Prominent cluster deployment and tools we will be looking at are,
    </p>
    <ol>
      <li><strong>Docker Swarm</strong></li>
      <li><strong>Kubernetes</strong></li>
    </ol>
    <h3>
    1. Docker Swarm
    </h3>
    <p>
      <img src="https://raw.githubusercontent.com/docker-library/docs/471fa6e4cb58062ccbf91afc111980f9c7004981/swarm/logo.png">
    </p>
    <p>A swarm is a group of machines running docker tied togther 
      to form a cluster managed by a swarm manager. Once a cluster is
      created, all the machines tied together are referred to as 
      nodes/workers. 
      Only the swarm manager machine has authorization to execute commands
      or add more workers.
    </p>
    <ul>
      <li><strong>Swarm Manager</strong></li>
      <li><strong>Worker or Node</strong></li>
    </ul>
    <h4>Example of a Docker Swarm Deployment</h4>
    <p>
    Lets look at a demonstration of a cluster deployment using docker swarm
    </p>
    <h4>-- Aim:</h4>
    <ul>
      <li>To deploy the static webpage in a cluster with multiple 
        instances using docker swarm
        <ul>
          <li><p><b>Cluster/Nodes:</b> Group of virtual machines</p></li>
          <li><p><b>Application:</b> devOps wesite served as static web pages</p></li>
          <li><p><b>Tool Used:</b> Docker swarm</p></li>
        </ul>
      </li>
    </ul>
      <h5>-- Components:</h5>
    <ul>
      <li><strong>Swarm Manager -</strong> Assuming the local machine &lt;machine 
          you are using&gt; or one of the cirtual machine to be the manager</li>
      <li><strong>devOps website as a container -</strong>
    <ul>
      <li><strong>Dockerfile -</strong> Using standalone nginx container 
          and serving the static webpages from source</li>
      <li><strong>DockerCompose -</strong> Using a combination of multiple containers
          of nginx &lt;to host the website&gt; + git-sync &lt;to sync with the 
          repository&gt; + common container storage</li>
      <li> while in this context, lets take a detour to briefly look at  
          <em>dockerFile vs dockerCompose</em>
    <ul>
      <li><strong>dockerFile:</strong><br>
        When a self-contained container or monolithic container 
        image is to be created which suffices the functionality 
        within itself, a docker file is used<br>
        <img src="https://i.stack.imgur.com/jc2IW.jpg" title="dockerFile">
      </li>
    <li>
      <strong>dockerCompose:</strong><br>
      When multiple containers are required which together suffice a 
      functionlity as a team, docker compose is used<br>
      <img src="https://raw.githubusercontent.com/docker/compose/master/logo.png" title="dockeCompose"></li>
      </ul>
    </li>
    </ul>
    </li>
      <li><strong>Virutal machines -</strong> 
      either remote cloud machines or local setup of vms using virutalBox</li>
      <li><strong>Setup Concern -</strong> 
        Due to cloud machine availability, lets resort to a local setup for 
        the example and peek into an instance of cloud deployment as well.</li>
    </ul>
      <h5>-- Installation:</h5>
    <ul>
      <li>Ensure docker is installed</li>
        <li>Possess any virtual machine setup provision using virtualbox or
         vmware workstation or make cloud machines setup</li>
    </ul>
        <h5>-- Setup:</h5>
    <ul>
        <li><strong>TestBed 1:</strong> As per instructions in docker page,
         use a nginx container to host the website source code while running
          docker instance</li>
    </ul>
      <pre>
        <code>
          <span>
          # Pull the nginx docker image from register =&gt; docker pull nginx

          $ docker run --name devops_website -p 127.0.0.1:8080:80 -v &lt; location of website sourcecode &gt;:/usr/share/nginx/html -d nginx
          </span>
        </code>
      </pre>
      <ul>
      <li>
        <strong>TestBed 2:</strong> 
        Use the dockerCompose file below which uses,
      <ul>
        <li><em>Two containers:</em>
        <ul>
          <li>nginx - to host the website</li>
          <li>git-sync - to sync with the git repo for new changes</li>
        </ul>
        </li>
        <li><em>Storage</em> - a common datastore to hold the website source code</li>
      </ul>
      </li>
      </ul>
      <pre>
        <code> 
          # A Docker compose to create the application with two containers
          # * 1. Nginx container
          # * 2. git-sync container
          # Reference from: https://hub.docker.com/r/openweb/git-sync/
          # Run with `docker-compose up -d` once the dockerCompose 
          file is created 
          version: "2"
            services:
              nginx:
                image: nginx:latest
                ports:
                  - "8080:80"
                volumes:
                  - website_sources:/usr/share/nginx/html:z
                depends_on:
                  - git-sync
                restart: always
              git-sync:
                image: openweb/git-sync:0.0.1
                environment:
                  GIT_SYNC_REPO: "https://github.com/gcallah/DevOps"
                  GIT_SYNC_DEST: "/git"
                  GIT_SYNC_BRANCH: "master"
                  GIT_SYNC_REV: "FETCH_HEAD"
                  GIT_SYNC_WAIT: "10"
                volumes:
                  - website_sources:/git:z
                restart: always
            volumes:
              website_sources:
            driver: local
        </code>
        </pre>
        <h5>Steps for Usage:</h5>
      </div>
    </div>
    </body>
</html>