<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <link href="../style.css" rel="stylesheet" type="text/css"/>
        <title>
            ANSIBLE Part 2
        </title>
    </head>

    <body>

        <h1>
            <u><b>ANSIBLE Modules</b></u>
        </h1>
        
        
        <p> 
        In this section, we will walkthrough common modules with their 
        implementation and explanation<br/></br>
        </p>


        <p><b>EXAMPLE 1: Copy file from a local machine to a remote server</b></p>

    <p> The copy module copies a file from the local or remote machine to a 
    location on the remote machine. Use the fetch module to copy files from 
    remote locations to the local box. For Windows targets, use the win_copy 
    module instead.

        <pre>
        - hosts: blocks
          tasks:
            - name: Copy a file from local to remote server
              copy:
                src: ~/Users/test_file.txt
                dest: /tmp
                mode: u=rw,g=r,o=r
        </pre>
    </p>
       <p> The above example describes simple module for copying a file from 
       one system to another with specific mode and permission for users, 
       group and others.
    </p>
        <br>
        <br>

         <p><b>EXAMPLE 2: Access Control List - Set and Retrieve file ACL 
         information</b> </p>

    <p> Sets and retrieves file ACL information.

        <pre>
        - hosts: blocks
          tasks:
            - name: Grant user John read access to a file
            acl:
                path: /etc/acl.conf
                entity: John
                etype: user
                permissions: r
                state: present
        </pre>
       </p>
       <p> The above example describes a module for setting up access control 
       permissions for a user to access a particular file or folder. An 
       entity can be a user as well as a group of users, which may requires 
       certain permissions.
    </p>

    <br>
        <br>

         <p><b>EXAMPLE 3: Manage IAM users, groups, roles and keys</b> </p>

    <p> Allows for the management of IAM users, user API keys, groups, roles.

        <pre>
        - hosts: blocks
          tasks:
            - name: Create IAM role with custom trust relationship
            iam:
                iam_type: role
                name: AAALambdaTestRole
                state: present
            trust_policy:
                Version: '2012-10-17'
            Statement:
            - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                    Service: lambda.amazonaws.com
        </pre>
       </p>
       <p> The above example describes a module for custom trust policy for 
       Lambda Services
       </p>


        <br>
        <br>

         <p><b>EXAMPLE 4: net_system - Manage the system attributes on 
         network devices</b> </p>

    <p> This module provides declarative management of node system attributes
    on network devices. It provides an option to configure host system 
    parameters or remove those parameters from the device active 
    configuration.

        <pre>
        - hosts: blocks
          tasks:
            - name: configure name servers
            net_system:
                name_servers:
                    - 8.8.8.8
                    - 8.8.4.4
        </pre>
    </p>
       <p> The above example describes a module for configuring domain name 
       service for multiple hosts on the network
    </p>
        <p>

        <pre><b> SITE UNDER CONSTRUCTION</b></pre>
        </p>
    </body>
</html>
