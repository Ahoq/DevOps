<!DOCTYPE html>
<html>
    <head>
<!--include subhead.txt -->
        <title>
            The DevOps Handbook
        </title>
<!--include googleAnalyticsScript.txt -->
    </head>

    <body>
      <div class="wrapper">
<!--include navbar.txt -->
          <div id="content">
            <h1>
                Lean Software Development: An Agile Toolkit
            </h1>
            <p class="author">
                Authors: Mary and Tom Poppendieck
                <br>
                Reviewers: Jiawei Wang, Bowei Xu
            </p>
            <h2>
              Introduction
            </h2>
            <p>
              This book aims to introduce the thinking tools for software
              development process to go agile. It functions aside
              a toolkit to help translate widely accepted lean principles
              into effective, agile practices that can be customized
              to individual software development domains. The author is
              trying to dig out the potential improvement for development
              process.
              <br />
              This book contains 22 thinking tools to help develop the agile
              practices that work best in all people's particular domains.
              These tools are summarized into 7 lean principals from which
              they are translated.
            </p>
              <br />
              <ul class="nested">
                  <li>Eliminate waste</li>
                  <li>Amplify learning</li>
                  <li>Decide as late as possible</li>
                  <li>Deliver as fast as possible</li>
                  <li>Empower the team</li>
                  <li>Build integrity in</li>
                  <li>See the whole</li>
              </ul>
              <br />
            <p>
              These principles and its related toolkits are introduced in
              details one principle each chapter and provide
              practical suggestions for implementing the priciples and these
              toolkits. Very good book for managers, project managers and
              technical leaders.
            </p>
            <details>
                <summary class="sum2">
                    Chapter 1: Eliminate Waste
                </summary>
                <p>
                  This concept, Eliminate waste, is first brought up by the
                  Taiichi Ohno, known as the father of the Toyota Production
                  System, to deal with the conflict of market requirement and
                  manufacture cost. In this concept, he gives waste a new
                  definition "anything that does not create value for a
                  customer is waste. A part that is sitting around waiting to
                  be used is waste. Making something that is not immediately
                  needed is waste. Motion is waste. Transportation is waste.
                  Waiting is waste. Any extra processing steps are waste.
                  And of course defects are waste"[1]. The core of his ideal is
                  that immediate production delivery is better than inventory.
                  The history has proven the validity of his idea and this
                  concept is becoming the most fundamental lean principles that
                  all other principles should follow from.
                  <br /><br />
                </p>
                <p>
                  So before everything else, to implement this principle, the
                  first step is learning to see waste. If a thing can't
                  contribute to customer's perception or there is a way to go
                  around it, it is waste. By this definition, Windston Royce
                  had seen all steps besides coding and analysis are waste to
                  development in 1970. The author metion this because it is a
                  good start to re-evalue steps in development waterfall
                  process. Then the auther translates the 7 wastes of
                  manufacturing identified by Shigeo into 7 corresponding
                  wastes in software development.
                </p>
                  <br />
                  <table>
                    <tr>
                      <th>7 Wastes in Software Development</th>
                      <th>Cost</th>
                    </tr>
                    <tr>
                     <th>Partially Done Work</th>
                     <th>
                  Partially done work will not get in the way of other
                  development but also yields no valuable delivery and tie up
                  resources. It also gonna be a high risk in final production.
                    </th>
                  </tr>
                  <tr>
                    <th>Extra Process</th>
                    <th>
                  Unnecessary paperwork are a mass extra cost to Development
                  process. Paperwork should be something eager to use and
                  need to transmit effective information.
                    </th>
                  </tr>
                  <tr>
                    <th>Extra Features</th>
                    <th>
                  Extra features that seems harmless  would increase complexity
                  and tential failure point. Codes that not needed now should
                  be treated as waste.
                    </th>
                  </tr>
                  <tr>
                    <th>Task Switching</th>
                    <th>
                    Assigning people multiple projects is a waste since the
                    switch among them would cost much time for developers
                    to switch their thoughts and may cause interruptions.
                    With same resource, projects should be done one by one.
                    </th>
                  </tr>
                  <tr>
                    <th>Waiting</th>
                    <th>
                      Waiting is one of the biggest wastes that delys are very
                      common in software development. It keeps
                      customers from realizing value as soon as possible[1].
                    </th>
                  </tr>
                  <tr>
                    <th>Motion</th>
                    <th>
                      The process of motion could become waste in process, not
                      only the people, but also the artifact information. Team
                      work apart would cost time to communicate with each other
                      .
                      Handoff document from group to group also would be the
                      source since it can't contain all creater's knowledge.
                    </th>
                  </tr>
                  <tr>
                    <th>Defects</th>
                    <th>
                      Defect is a waste due to its impact and its undetected
                      period. The reduction can be improved by testing
                      immediately, integrating often and release as soon as
                      possible.
                    </th>
                  </tr>
                </table>
                <br />
                <br />
                <p>
                Although management, project tracking and control syste,
                authorization system would not directly add value to the
                production process, they are still very important because
                wastes mentioned above can be minimized by these systems.
                </p>
                <p>
                The second step of implementation is value stream mapping.
                Value stream map is a good way to evaluate the waste and value
                of items in process. The author bring up the comparison between
                traditional development process and agile development
                by value stream map. It is very obvious that where the delays
                and waste are in process. From this, we are well acknowledged
                of the power of the value stream map. It is very helpful for
                management level to take an overall view of the process and
                uncover all hiden waste which should be eliminated. A value
                stream map is also a effective tool that development team can
                acknowledge the biggest opportunites to deliver value and
                expediate the workflow. The author also give an simplified
                action model to create and apply the value stream map:
                <br /><br />
                1. Make list of 10-15 most important activities and evaluate
                their rank of value with customer. Plan to cut time on the
                lowest two activities.<br />
                2. Evaluate all items according to the 7 waste introduced
                in toolkit 1 and plan on time reduction of the waste
                found.<br />
                3. Create a value stream map and find out the time of adding
                value and waiting. Develop plan on cut the biggest cause of
                delay in the development process.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 2: Amplify Learning
                </summary>
                <p>
                  Coming soon.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 3: Decide as late as possible
                </summary>
                <p>
                  So in this part, the authors brings up the priority of
                  concurrent development over sequatial development and
                  what is "decide as late as possible" and why. They start
                  with the comparison of cost of adapting changes to die design
                  in American and Japanese car production process in 80s last
                  century. The cost in Japan is much lower not due to a better
                  original design but because they are using a more
                  efficient and change-tolerance method, cocurrent process.
                  And same in software development, programing has shown great
                  improvement after switching to concurrent development.
                  Instead
                  of traditional depth-first design that constrains high-level
                  and low-level decisions together, the new developemt applies
                  breadth-first approach in design that high-level problem or
                  changes can be adapted with much less cost since
                  breadth-first
                  method allow engineer to consider most options so inevitable
                  changes or problems can be found and worked out as soon as
                  possible which will overal cost much less time in deliverying
                  the final product. Also, software is the kind of product that
                  requires lifetime uprgade and these upgrades are not small
                  even compared to the original product. So the design of
                  a product should be more flexible to accept possible changes
                  that could occur in development process or after release to
                  avoid cost escalation. Decide as late as possible could help
                  with it since it could help minimized the high-stake
                  constrains and apply breadth-first approach to make them as
                  correct as possible. It also can reduce the decisions number
                  leading to changes and the cost escalation factor for
                  changes. So using concurrent development and decide as late
                  as possible help reduce the cost by minimize the constrains
                  of a product to accept changes and reduce the changes cost.
                </p><br />
                <p>
                  The first tool introduced in this part is options thinking.
                  As mentioned by the authors, the arraction of satisfication
                  guaranteed warranties is that irrevocable decision is not
                  preferred by people when there is uncertainty. HP has brought
                  a good example of how delay decisions helps in this condition
                  that they make the electrical configuration of their printers
                  after the orders are made so there could be adjustment among
                  countries with different configuration. This is called
                  "option opened" that delay the decision that make less
                  constrains on options until the uncertainty gone. Microsoft
                  also gambled in options by providing several systems that
                  allow them to hold most options in market to reduce risk. And
                  same in software development, minimize the options limit by
                  delaying decisions until the customer requirement is clear
                  or mature technology has been achieved would reduce cost in
                  future changes or adjustment. However, options thinking is
                  not something guaranteeing success but move the development
                  into a favorable direction when there is uncertainty. To
                  well apply it, engineer must be experienced and research much
                  to decide which options should be open instead of keeping
                  everything open.
                </p>
            </details>
            <h2>
              Citation:
            </h2>
            <p>
              [1] Poppendieck, Mary. Lean Software Development: An Agile
              Toolkit (Agile Software Development Series) (p. 1). Pearson
              Education. Kindle Edition.
            </p>
          </div>
        </div>
    </body>
</html>
