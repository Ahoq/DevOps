<!DOCTYPE html>
<html>

<head>
    <!--include subhead.txt -->
    <title>
        Continuous Delivery
    </title>
</head>

<body>
    <div class="wrapper">
        <!--include navbar.txt -->
        <div id="content">
            <h1>
               Continuous Delivery
            </h1>
            <p class="author">
                Authors: Jez Humble and David Farley
                <br> Reviewers: Ravish Bhatia, Sneha Ghosh
            </p>
            <p>
                This book recommends best practises for continuous, reliable 
                and efficient software delivery. The goal is to deliver value 
                to the customer as early as possible and get faster feedback. 
                It talks about ways to reduce time and risks associated with 
                new versions of software. It describes the ways to make 
                delivery reliable, visible and automated using a deployment 
                pipeline. It highlights the importance of collaboration among 
                the people responsible for delivering software and how they 
                can get involved effectively to achieve the goals.
            </p>
            <details>
                <summary class="sum2">
                    Chapter 1: The Problem of Delivering Software
                </summary>
                <p>
                The authors start by illustrating their goal building a
                deployment pipeline, which is an automated implementation of 
                the applicationâ€™s build, deploy, test, and release process.
                They discuss the common antipatterns prevalent in software 
                releases today, and the benefits of their approach. They also 
                briefly discuss that to achieve their goal, the software needs
                to be frequently and automatically released. Finally they 
                discuss some of the principles of software delivery like 
                reliable releases, automation, version control, continuous 
                improvement etc.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 2: Configuration Management
                </summary>
                <p>
                The authors describe Configuration Management as
                the process by which all relevant artifacts for a project and
                the relationship between them are stored, retrieved, uniquely
                identified and modified. They highlight how version control
                fosters collaboration among teams distributed in space and 
                time. The authors recommend checking in everything in trunk on
                a regular and frequent basis and oppose the practice of using 
                branches. The authors also emphasize the importance of testing 
                and proper management of configurations. They stress the 
                importance of managing the environment by creating a fully 
                automated process. Thus they try to highlight the importance 
                of configuration management which is the foundation for 
                continuous integration, release management and deployment 
                pipeline.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 3: Continuous Integration
                </summary>
                <p>
                The goal of continuous integration is that the
                software is in a working state all the time. The teams that
                use continuous integration effectively are able to deliver
                software much faster, with fewer bugs, than teams that do not.
                Bugs are caught much earlier in the delivery process when they
                are cheaper to fix, providing significant cost and time
                savings.  The authors describe how to implement continuous
                integration by discussing the prerequisites and how to get
                started by setting up the CI server. They also discuss tools
                like Maven and Ivy to help manage third-party dependencies of
                the development workspace. They describe continuous
                integration as a software that can execute a workflow at
                regular intervals and provide a detailed view of success and
                failures of the builds and tests. The authors then discuss
                essential practices to make continuous integration
                effective.
                Thus authors point out that an established CI system is a
                foundation on which more infrastructure can be built. It
                provides visibility by aggregating the build information to
                provide high quality feedback and can be extended to do
                push-button deployments.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 4: Testing Strategy
                </summary>
                <p>
                This chapter focuses on the planning and impementation of
                effective automation testing systems and their benefits.
                The authors encourage writing testing scripts from the 
                beginning of the project and running them within the
                deployment pipeline which is triggered whenever any change 
                is made to the application. They describe the different types
                of tests in detail like acceptance tests, unit tests, 
                component tests and deployment tests. Manual testing 
                techniques like showcases, usability testing and exploratory 
                testing are important to build quality. They talk about modern
                automated functional testing tools like Cucumber, JBehave, 
                Concordion and Twist and their benefits. They describe the 
                process by which testing strategy can be implemented by 
                bringing together all the stakeholders to note down the 
                highest priority scenarios every iteration and then building 
                automation for them.
                Thus authors highlight that automation testing should be 
                included from the beginning to develop a feedback loop which
                generates higher quality, higher productivity and also the 
                measure of the doneness of the project. 
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 5: Anatomy of the Deployment Pipeline
                </summary>
                <p>
                The authors describe deployment pipeline as the process of 
                automating the build, deploy, test, and release process to 
                deliver the feature from check-in to release. They describe 
                the different stages of deployment pipeline and the best 
                practices which should be followed in each of those stages. 
                They also describe the steps to implement a deployment 
                pipeline. Feedback is important in software delivery and can 
                be measured by various metrics. The authors suggest having a 
                global metric like cycle time to measure feedback and its 
                measurement should be simple and made visible to discover 
                bottlenecks. Thus the deployment pipeline should help in 
                discovering which check-ins have caused issues and should 
                allow everyone involved in software delivery to get visibility 
                into the progress of builds.
                </p>
            </details>
        </div>
    </div>
</body>
</html>
