<!DOCTYPE html>
<html>

<head>
    <!--include subhead.txt -->
    <title>
        Continuous Delivery
    </title>
    <!--include googleAnalyticsScript.txt -->
</head>

<body>
    <div class="wrapper">
        <!--include navbar.txt -->
        <div id="content">
            <h1>
               Continuous Delivery
            </h1>
            <p class="author">
                Authors: Jez Humble and David Farley
                <br> Reviewers: Ravish Bhatia, Sneha Ghosh
            </p>
            <p>
                This book recommends best practises for continuous, reliable
                and efficient software delivery. The goal is to deliver value
                to the customer as early as possible and get faster feedback.
                It talks about ways to reduce time and risks associated with
                new versions of software. It describes the ways to make
                delivery reliable, visible and automated using a deployment
                pipeline. It highlights the importance of collaboration among
                the people responsible for delivering software and how they
                can get involved effectively to achieve the goals.
            </p>
            <details>
                <summary class="sum2">
                    Chapter 1: The Problem of Delivering Software
                </summary>
                <p>
                The authors start by illustrating their goal building a
                deployment pipeline, which is an automated implementation of
                the applicationâ€™s build, deploy, test, and release process.
                They discuss the common antipatterns prevalent in software
                releases today, and the benefits of their approach. They also
                briefly discuss that to achieve their goal, the software needs
                to be frequently and automatically released. Finally they
                discuss some of the principles of software delivery like
                reliable releases, automation, version control, continuous
                improvement etc.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 2: Configuration Management
                </summary>
                <p>
                The authors describe Configuration Management as
                the process by which all relevant artifacts for a project and
                the relationship between them are stored, retrieved, uniquely
                identified and modified. They highlight how version control
                fosters collaboration among teams distributed in space and
                time. The authors recommend checking in everything in trunk on
                a regular and frequent basis and oppose the practice of using
                branches. The authors also emphasize the importance of testing
                and proper management of configurations. They stress the
                importance of managing the environment by creating a fully
                automated process. Thus they try to highlight the importance
                of configuration management which is the foundation for
                continuous integration, release management and deployment
                pipeline.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 3: Continuous Integration
                </summary>
                <p>
                The goal of continuous integration is that the
                software is in a working state all the time. The teams that
                use continuous integration effectively are able to deliver
                software much faster, with fewer bugs, than teams that do not.
                Bugs are caught much earlier in the delivery process when they
                are cheaper to fix, providing significant cost and time
                savings.  The authors describe how to implement continuous
                integration by discussing the prerequisites and how to get
                started by setting up the CI server. They also discuss tools
                like Maven and Ivy to help manage third-party dependencies of
                the development workspace. They describe continuous
                integration as a software that can execute a workflow at
                regular intervals and provide a detailed view of success and
                failures of the builds and tests. The authors then discuss
                essential practices to make continuous integration
                effective.
                Thus authors point out that an established CI system is a
                foundation on which more infrastructure can be built. It
                provides visibility by aggregating the build information to
                provide high quality feedback and can be extended to do
                push-button deployments.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 4: Testing Strategy
                </summary>
                <p>
                This chapter focuses on the planning and impementation of
                effective automation testing systems and their benefits.
                The authors encourage writing testing scripts from the
                beginning of the project and running them within the
                deployment pipeline which is triggered whenever any change
                is made to the application. They describe the different types
                of tests in detail like acceptance tests, unit tests,
                component tests and deployment tests. Manual testing
                techniques like showcases, usability testing and exploratory
                testing are important to build quality. They talk about modern
                automated functional testing tools like Cucumber, JBehave,
                Concordion and Twist and their benefits. They describe the
                process by which testing strategy can be implemented by
                bringing together all the stakeholders to note down the
                highest priority scenarios every iteration and then building
                automation for them.
                Thus authors highlight that automation testing should be
                included from the beginning to develop a feedback loop which
                generates higher quality, higher productivity and also the
                measure of the doneness of the project.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 5: Anatomy of the Deployment Pipeline
                </summary>
                <p>
                The authors describe deployment pipeline as the process of
                automating the build, deploy, test, and release process to
                deliver the feature from check-in to release. They describe
                the different stages of deployment pipeline and the best
                practices which should be followed in each of those stages.
                They also describe the steps to implement a deployment
                pipeline. Feedback is important in software delivery and can
                be measured by various metrics. The authors suggest having a
                global metric like cycle time to measure feedback and its
                measurement should be simple and made visible to discover
                bottlenecks. Thus the deployment pipeline should help in
                discovering which check-ins have caused issues and should
                allow everyone involved in software delivery to get visibility
                into the progress of builds.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 6: Build and Deployment Scripting
                </summary>
                <p>
                The authors describe the techniques of creating an
                automated build and deployment process. They categorize
                the build tools into task oriented and product oriented
                tools describing their properties and the principles common
                to all the build and deployment tools.
                They also describe the advantages and disadvantages of some
                commonly used build tools like Make, Ant, Maven, Rake,
                Buildr. They discuss some of the best practices commonly
                used in the deployment setup for any application.
                The standard project layout used by Maven is described
                which gives a good idea for structuring any application.
                The strategies and best practices to solve common build and
                deployment problems  are discussed. The authors emphasize
                that the deployment scripts should be version-controlled,
                maintained, tested, and refactored and should be the only
                way to deploy the software.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 7: The Commit Stage
                </summary>
                <p>
                In this chapter authors describe the commit stage which is 
                the first stage of the deployment pipeline and discuss about 
                creating effective commit tests. They describe the principal 
                goal of the commit stage which is either to create deployable 
                artifacts or fail fast and notify the developers of a concise 
                summary of the reasons for the failures showing a list of 
                failed tests, the compile errors or other error conditions.
                They describe some of the best practices used in commit stage 
                like when to break the commit stage, constantly improve the 
                commit stage scripts, give developers ownership and use build
                master in large teams. They discuss about storing the output 
                of the commit stage in an artifact repository. They describe 
                the principles of the commit test suite and the strategies 
                that can be used to run tests quickly. They also recommend 
                using mocking toolset and discuss an example based on open 
                source mock system called JMock. Thus the establishment of a 
                commit stage launched on every change, that builds binaries, 
                runs automated tests and generates metrics is important to 
                adopt the practice of continuous integration.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 8: Automated Acceptance Testing
                </summary>
                <p>
                The authors discuss the importance of acceptance tests within
                the deployment pipeline. They describe how acceptance
                tests are different from unit or component tests, the former
                being more business focused. In their experience, the cost of
                creating and maintaining automated acceptance tests is much
                lower than repetitive manual and regression testing. They
                also discuss how to implement and maintain effective 
                acceptance tests with code examples. They describe the 
                principles and practices that should be used in the 
                acceptance test stage. They also discuss the benefits of 
                making the delivery team that includes developers and 
                testers, owners of the automated acceptance tests. Lastly,
                they describe the techniques which can improve the 
                performance of the acceptance test suite.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 9: Testing Nonfunctional Requirements
                </summary>
                <p>
                In this chapter authors discuss nonfunctional requirements 
                specifically capacity testing. They start by discussing the 
                importance of nonfunctional requirements, how to analyze them 
                and how to measure capacity. Then they describe how to create 
                the capacity testing environment to conduct the measurements. 
                They recommend creating a replica of production environments 
                for the applications in which performance is a serious concern.
                They discuss the strategies for creating capacity tests from 
                the automated acceptance test suite which represent realistic 
                scenarios to obtain comprehensive, maintainable coverage of the
                system. They recommend adding nonfunctional testing as a
                separate stage into the deployment pipeline. Lastly, they 
                discuss some additional benefits of using a capacity testing 
                system and call it an invaluable resource.
                </p>
            </details>
            <details>
                <summary class="sum2">
                    Chapter 10: Deploying and Releasing the Applications
                </summary>
                <p>
                In this chapter, the authors focus on the differences between deploying the software in a testing environment and releasing it in the production, supported by an interesting example of test and release process diagram. They have discussed about two effective strategies to ensure zero-downtime releases and rollbacks: blue-green deployments and canary releasing. A critical stress has been put on the suggestion of 'not' subverting the processes in case of emergency fixes. They define that the aggressive approach of directly deploying changes to the production environment in case of an emergency fix might lead to severe consequences like introducing new issue due to the incompatibility of the changes made, and also, the environment might move to unknown state due to unregistered changes and make it impossible to reproduce. Lastly, they refer to few tips and tricks like encouraging the people who are involved in deployment should be involved in creating the deployment process and techniques, every activity should be registered, avoid deleting the old file and rather relocate them. Most importantly, release planning is getting the representatives from every part of your organization involved in the delivery and these people should continue to meet throughout the life of the project and continually work to make the delivery process more efficient.
                </p>
            </details>
        </div>
    </div>
</body>
</html>
